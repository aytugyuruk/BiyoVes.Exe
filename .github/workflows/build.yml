name: Build Windows EXE
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Pull Git LFS files
        run: |
          git lfs pull
          echo "Git LFS files pulled"
          if (Test-Path "MODNet/pretrained/modnet_photographic_portrait_matting.ckpt") { 
            echo "MODNet model file found: $((Get-Item 'MODNet/pretrained/modnet_photographic_portrait_matting.ckpt').Length) bytes" 
          } else { 
            echo "MODNet model file NOT found!" 
          }
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Verify files exist
        run: |
          echo "Checking required files..."
          if (Test-Path "desktop_app.py") { echo "✓ desktop_app.py found" } else { echo "✗ desktop_app.py missing"; exit 1 }
          if (Test-Path "haarcascade_frontalface_default.xml") { echo "✓ haarcascade file found" } else { echo "✗ haarcascade file missing"; exit 1 }
          if (Test-Path "appicon.ico") { echo "✓ appicon.ico found" } else { echo "⚠ appicon.ico missing - build will continue without icon" }
          if (Test-Path "MODNet/pretrained/modnet_photographic_portrait_matting.ckpt") { echo "✓ MODNet checkpoint found" } else { echo "⚠ MODNet checkpoint missing - Local mode won't work" }
          echo "Building with both API and Local support"
      
      - name: Build with PyInstaller
        run: |
          $iconParam = if (Test-Path "appicon.ico") { "--icon=appicon.ico" } else { "" }
          pyinstaller `
            --onefile `
            --windowed `
            --name="BiyoVes" `
            $iconParam `
            --add-data="haarcascade_frontalface_default.xml;." `
            --add-data="app_modules;app_modules" `
            --add-data="MODNet;MODNet" `
            --add-data="MODNet/pretrained/modnet_photographic_portrait_matting.ckpt;MODNet/pretrained/" `
            --hidden-import=cv2 `
            --hidden-import=PIL `
            --hidden-import=numpy `
            --hidden-import=requests `
            --hidden-import=replicate `
            --hidden-import=replicate.client `
            --hidden-import=replicate.__about__ `
            --hidden-import=importlib.metadata `
            --hidden-import=tkinter `
            --hidden-import=tkinter.ttk `
            --hidden-import=tkinter.filedialog `
            --hidden-import=tkinter.messagebox `
            --hidden-import=torch `
            --hidden-import=torchvision `
            --hidden-import=torch.nn `
            --hidden-import=torch.nn.functional `
            --hidden-import=torchvision.transforms `
            --hidden-import=app_modules.modnet_bg `
            --hidden-import=app_modules.modnet_local `
            --hidden-import=app_modules.center_biyo `
            --hidden-import=app_modules.center_vesika `
            --hidden-import=app_modules.duzen `
            --hidden-import=app_modules.enhance `
            --hidden-import=app_modules.user_credits `
            --hidden-import=app_modules.server_config `
            --collect-all=replicate `
            --collect-all=importlib.metadata `
            --collect-all=torch `
            --collect-all=torchvision `
            --collect-all=torch.distributed `
            --collect-all=torch.nn `
            --collect-all=torch.nn.functional `
            --collect-all=torchvision.transforms `
            --collect-all=torchvision.models `
            --collect-all=torchvision.datasets `
            --collect-all=torchvision.utils `
            --clean `
            --noconfirm `
            desktop_app.py
      
      - name: Check build output
        run: |
          echo "Build output structure:"
          Get-ChildItem -Path "dist" -Recurse | Format-Table -AutoSize
      
      - name: Test exe with debug script
        run: |
          echo "Testing exe with debug script..."
          pyinstaller --onefile --name="DebugBiyoVes" debug_exe.py
          echo "Debug exe created, testing..."
          echo "Starting DebugBiyoVes.exe..."
          .\dist\DebugBiyoVes.exe
          echo "Debug exe test completed"
      
      - name: Test main exe in debug mode
        run: |
          echo "Testing main exe in debug mode..."
          echo "Starting BiyoVes.exe --debug..."
          .\dist\BiyoVes.exe --debug
          echo "Main exe debug test completed"
      
      - name: Create release package
        run: |
          New-Item -ItemType Directory -Force -Path "release"
          Copy-Item -Path "dist\*" -Destination "release\" -Recurse
          if (Test-Path "README.md") { Copy-Item "README.md" "release\" }
          Compress-Archive -Path "release\*" -DestinationPath "BiyoVes-Windows.zip"
      
      - name: Upload EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: BiyoVes-Windows-EXE
          path: dist/BiyoVes.exe
          if-no-files-found: error
      
      - name: Upload full package
        uses: actions/upload-artifact@v4
        with:
          name: BiyoVes-Windows-Full
          path: BiyoVes-Windows.zip
          if-no-files-found: error